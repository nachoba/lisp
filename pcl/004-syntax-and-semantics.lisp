#|

    FILENAME:            004-syntax-and-semantics.lisp
    AUTOR:               Ignacio Sniechowski
    DATE:                14/10/2017
    REVISION:      
    DESCRIPTION:         From Chapter 4 "Practical Common Lisp"
    SUMMARY:             [01] Introduction
                         [02] Breaking Open the Black Box
                         [03] S-expression
                         [04]


    CHAPTER 4 - SYNTAX AND SEMANTICS
    --------------------------------

    [01] INTRODUCTION
    -----------------
    In this chapter we will start with an overview of the basic elements of
    Lisp's syntax and semantics.
    Lisp's syntax is different from the syntax of languages descended from Algol.
    The two most important differences are extensive use of parentheses and prefix
    notation.

    [02] BREAKING OPEN THE BLACK BOX
    --------------------------------
    Common Lisp defines two "black boxes"; one that translates text into Lisp
    objects and another that implements the semantics of the language in terms
    of those objects.
    The first box is called the "reader", and the second is called the "evaluator".
    Each black box defines one level of syntax: 

    * The "reader" defines how strings of characters can be translated into Lisp
    objects called "s-expressions". Since the s-expression syntax includes syntax
    for lists of arbitrary objects, including other lists, s-expressions can
    represent arbitrary tree expressions, much like the abstract syntax tree
    generated by the parsers for non-Lisp languages.

    * The "evaluator" then defines a syntax of Lisp "forms" that can be built out
    of s-expressions. Not all s-expressions are legal Lisp forms; for instance,
    (foo 1 2) and ("foo" 1 2) are both s-expressions, but only the former can
    be a Lisp form since a list that startx with a string has no meaning as a
    Lisp form.

    [03] S-EXPRESSIONS
    ------------------
    The basic elements of s-expressions are "lists" and "atoms".
    Lists are delimited by parentheses and can contain any number of whitespace
    separated elemens. Atoms are everything else.
    The elements of lists are themselves s-expressions (in other words, atoms
    or nested lists).
    Comments are treated as whitespace.




#|

#lang racket
#|

Conditionals with if, and, or and cond
--------------------------------------
The next simplest kind of expression is an if conditional:

(if <expr> <expr> <expr>)

The first <expr> is always evaluated. If it produces a non-#f value, then the second <expr> is
evaluated for the result of the whole if expression, otherwise the third <expr> is evaluated for
the result.
|#

(define (reply s)
  (if (equal? "hello" (substring s 0 5))
      "hi!"
      "huh?"))

#|
Complex conditionals can be formed by nesting if expresions. For example, you could make the 
reply function work when given non-strings:
|#

(define (reply2 s)
  (if (string? s)
      (if (equal? "hello" (substring s 0 5))
          "hi!"
          "huh?")
      "huh?"))

; Instead of duplicating the "huh?" case, this function is better written as:

(define (reply3 s)
  (if (if (string? s)
          (equal? "hello" (substring s 0 5))
          #f)
      "hi!"
      "huh?"))

#|
But these kinds of nested ifs are difficult to read. Racket provides more readable
shortcuts through the "and" and "or" forms, which work with any number of expressions:

(and <expr> ...)
(or  <expr> ...)

The "and" form short-circuits: it stops and returns #f when an expression produces #f,
otherwise it keeps going.
The "or" form similarly short-circuits when it encounters a true (#t) result.
|#

(define (reply4 s)
  (if (and (string? s)
           (>= (string-length s) 5)
           (equal? "hello" (substring s 0 5)))
      "hi!"
      "huh?"))
